name: test

on:
  workflow_dispatch:
    inputs:
      profile:
        description: '请输入要编译固件大小 单位(MB)'
        required: true
        default: '300'
      include_docker:
        description: |
          是否编译 Docker 插件
        required: true
        default: 'no'
        type: choice
        options:
          - 'yes'
          - 'no'
      enable_pppoe:
        description: "是否配置PPPoE拨号信息?"
        required: true
        default: 'no'
        type: choice
        options:
        - 'yes'
        - 'no'
      pppoe_account:
        description: "宽带账号 (若启用PPPoE)"
        required: false
      pppoe_password:
        description: "宽带密码 (若启用PPPoE)"
        required: false

env:
  ALIST_URL: ${{ secrets.ALIST_URL }} # Alist IPv6 地址， 例如： "http://[2001:db8::1]:5244"
  ALIST_USERNAME: ${{ secrets.ALIST_USERNAME }}
  ALIST_PASSWORD: ${{ secrets.ALIST_PASSWORD }}
  ALIST_UPLOAD_PATH: ${{ secrets.ALIST_UPLOAD_PATH }}
  HTTP_PROXY: ${{ secrets.HTTP_PROXY }} # 例如 http://[2001:db8::2]:3128  确保代理支持 IPv6
  HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }} # 例如 http://[2001:db8::2]:3128 确保代理支持 IPv6

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set executable permissions
        run: chmod +x ${{ github.workspace }}/x86-64/build.sh

      - name: Validate PPPoE Inputs
        run: |
          if [[ "${{ inputs.enable_pppoe }}" == "yes" ]]; then
            if [[ -z "${{ inputs.pppoe_account }}" || -z "${{ inputs.pppoe_password }}" ]]; then
              echo "Error: PPPoE account and password must be provided when PPPoE is enabled!"
              exit 1
            fi
          fi

      - name: Build ImmortalWrt-x86-64-efi
        run: |
          profiles="${{ github.event.inputs.profile }}"
          include_docker="${{ github.event.inputs.include_docker }}"
          IFS=',' read -r -a profile_array <<< "$profiles"

          for profile in "${profile_array[@]}"; do
            echo "Building for profile: $profile"

            docker run --rm -i \
              --user root \
              -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
              -v "${{ github.workspace }}/files:/home/build/immortalwrt/files" \
              -v "${{ github.workspace }}/x86-64/imm.config:/home/build/immortalwrt/.config" \
              -v "${{ github.workspace }}/x86-64/24.10/build.sh:/home/build/immortalwrt/build.sh" \
              -e PROFILE=$profile \
              -e INCLUDE_DOCKER=$include_docker \
              -e ENABLE_PPPOE=${{ inputs.enable_pppoe }} \
              -e PPPOE_ACCOUNT=${{ inputs.pppoe_account }} \
              -e PPPOE_PASSWORD=${{ inputs.pppoe_password }} \
              immortalwrt/imagebuilder:x86-64-24.10-SNAPSHOT /bin/bash /home/build/immortalwrt/build.sh

          done

      - name: Generate Firmware SHA-256
        run: |
          cp ${{ github.workspace }}/bin/targets/x86/64/*squashfs-combined-efi.img.gz ${{ github.workspace }}
          for file in *squashfs-combined-efi.img.gz; do
            sha256sum "$file" > "$file.sha256"
            sha256sum -c "$file.sha256"
          done

      - name: Create info
        run: |
          if [ "${{ github.event.inputs.include_docker }}" == "yes" ]; then
            extra_content="#### 默认带docker"
            echo -e "\n $extra_content" >> ${{ github.workspace }}/info.md
          else
            echo -e "NO docker"
          fi

      - name: Generate Date and Time Tag
        id: datetime_tag
        run: echo "TAG_NAME=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install jq

      - name: Test IPv6 Connection to Alist (via Proxy if configured)
        run: |
          if [ -n "${{ env.HTTP_PROXY }}" ]; then
            echo "Testing IPv6 connection to Alist via proxy..."
            curl -6 -x "${{ env.HTTP_PROXY }}" -I "${{ env.ALIST_URL }}"
          else
            echo "Testing direct IPv6 connection to Alist..."
            curl -6 -I "${{ env.ALIST_URL }}"
          fi

      - name: Get Alist Token
        id: get_alist_token
        run: |
          ALIST_URL="${{ env.ALIST_URL }}"
          ALIST_USERNAME="${{ env.ALIST_USERNAME }}"
          ALIST_PASSWORD="${{ env.ALIST_PASSWORD }}"

          if [ -z "$ALIST_URL" ] || [ -z "$ALIST_USERNAME" ] || [ -z "$ALIST_PASSWORD" ]; then
            echo "Error: Alist URL, Username, or Password is not set. Skipping token retrieval."
            exit 1
          fi

          TOKEN=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"$ALIST_USERNAME\",\"password\":\"$ALIST_PASSWORD\"}" \
            "$ALIST_URL/api/auth/login" | jq -r '.data.token')

          if [ -z "$TOKEN" ]; then
            echo "Error: Failed to retrieve Alist token."
            exit 1
          fi

          echo "ALIST_TOKEN=$TOKEN" >> $GITHUB_OUTPUT
          echo "Alist token retrieved successfully."

      - name: Upload to Alist
        if: always()
        run: |
          ALIST_URL="${{ env.ALIST_URL }}"
          ALIST_UPLOAD_PATH="${{ env.ALIST_UPLOAD_PATH }}"
          ALIST_TOKEN="${{ steps.get_alist_token.outputs.ALIST_TOKEN }}"

          if [ -z "$ALIST_URL" ] || [ -z "$ALIST_TOKEN" ] || [ -z "$ALIST_UPLOAD_PATH" ]; then
            echo "Error: Alist URL, Token, or Upload Path is not set. Skipping upload."
            exit 0
          fi

          for file in ${{ github.workspace }}/*squashfs-combined-efi.img.gz ${{ github.workspace }}/*.sha256; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading $filename to Alist..."
              curl -X POST \
                -H "Authorization: Bearer $ALIST_TOKEN" \
                -F "file=@$file" \
                "$ALIST_URL/api/fs/upload?path=$ALIST_UPLOAD_PATH/$filename"

              if [ $? -eq 0 ]; then
                echo "Uploaded $filename to Alist successfully."
              else
                echo "Failed to upload $filename to Alist."
              fi
            else
              echo "File not found: $file. Skipping."
            fi
          done

      - name: Upload ImmortWrt as release assets
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: ${{ steps.datetime_tag.outputs.TAG_NAME }}
          body_path: ${{ github.workspace }}/info.md
          files: |
            ${{ github.workspace }}/*squashfs-combined-efi.img.gz
            ${{ github.workspace }}/*.sha256
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Old Releases
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            async function getReleases(owner, repo) {
              const { data: releases } = await github.rest.repos.listReleases({
                owner,
                repo,
                per_page: 100, // Adjust as needed
              });
              return releases;
            }

            async function deleteRelease(owner, repo, release_id) {
              try {
                await github.rest.repos.deleteRelease({
                  owner,
                  repo,
                  release_id,
                });
                console.log(`Deleted release ${release_id}`);
              } catch (error) {
                console.error(`Failed to delete release ${release_id}: ${error}`);
              }
            }

            async function deleteTag(owner, repo, tag_name) {
              try {
                await github.rest.git.deleteRef({
                  owner,
                  repo,
                  ref: `tags/${tag_name}`,
                });
                console.log(`Deleted tag ${tag_name}`);
              } catch (error) {
                console.error(`Failed to delete tag ${tag_name}: ${error}`);
              }
            }

            async function main() {
              const releases = await getReleases(owner, repo);
              const currentTag = "${{ steps.datetime_tag.outputs.TAG_NAME }}";

              for (const release of releases) {
                  if (release.tag_name !== currentTag) {
                      // Delete only releases that are not the current one
                      await deleteRelease(owner, repo, release.id);
                      await deleteTag(owner, repo, release.tag_name);
                  } else {
                      console.log(`Skipping deletion of current release and tag: ${currentTag}`);
                  }
              }
            }

            await main();
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 3
          keep_minimum_runs: 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
